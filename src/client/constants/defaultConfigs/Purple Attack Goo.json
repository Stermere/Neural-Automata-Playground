{
  "weights": [
    [
      [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ]
    ],
    [
      [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ]
    ],
    [
      [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ],
      [
        [
          0,
          0,
          -0.2,
          0,
          0
        ],
        [
          0,
          0,
          -0.3,
          0,
          0
        ],
        [
          -0.2,
          -0.3,
          6.1,
          -0.3,
          -0.2
        ],
        [
          0,
          0,
          -0.3,
          0,
          0
        ],
        [
          0,
          0,
          -0.2,
          0,
          0
        ]
      ],
      [
        [
          0,
          0,
          0,
          0,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          1,
          1,
          0
        ],
        [
          0,
          0,
          0,
          0,
          0
        ]
      ]
    ]
  ],
  "activationCode": "// SmoothLife activation function with RGB ring calculations\n// Based on Stephan Rafler's \"Generalization of Conway's Game of Life to a continuous domain\"\n// Modified to calculate 3 separate rings for RGB channels\n\n// SmoothLife parameters\nconst INNER_RADIUS: f32 = 2.5;  // ri - radius of inner disk (cell)\nconst RING_WIDTH: f32 = 2.0;    // width of each ring\nconst ANTIALIASING_WIDTH: f32 = 1.0;  // b - anti-aliasing zone width\n\n// Ring boundaries\nconst RING1_INNER: f32 = INNER_RADIUS;\nconst RING1_OUTER: f32 = INNER_RADIUS + RING_WIDTH;\nconst RING2_INNER: f32 = RING1_OUTER;\nconst RING2_OUTER: f32 = RING1_OUTER + RING_WIDTH;\nconst RING3_INNER: f32 = RING2_OUTER;\nconst RING3_OUTER: f32 = RING2_OUTER + RING_WIDTH;\n\n// Birth and death intervals\nconst BIRTH_1: f32 = 0.216;  // b1\nconst BIRTH_2: f32 = 0.365;  // b2\nconst DEATH_1: f32 = 0.267;  // d1\nconst DEATH_2: f32 = 0.435;  // d2\n\n// Sigmoid smoothness parameters\nconst ALPHA_N: f32 = 0.010;  // smoothness for neighborhood transitions\nconst ALPHA_M: f32 = 0.137;  // smoothness for cell transitions\n\n// Smooth step function (sigmoid)\nfn sigma1(x: f32, a: f32, alpha: f32) -> f32 {\n    return 1.0 / (1.0 + exp(-(x - a) * 4.0 / alpha));\n}\n\n// Interval function (between a and b)\nfn sigma2(x: f32, a: f32, b: f32, alpha: f32) -> f32 {\n    return sigma1(x, a, alpha) * (1.0 - sigma1(x, b, alpha));\n}\n\n// Mixing function based on cell state\nfn sigmaMix(x: f32, y: f32, m: f32, alpha: f32) -> f32 {\n    return x * (1.0 - sigma1(m, 0.5, alpha)) + y * sigma1(m, 0.5, alpha);\n}\n\n// Calculate weight for a specific ring given distance\nfn calculateRingWeight(distance: f32, innerRadius: f32, outerRadius: f32) -> f32 {\n    // Check if distance is within the ring bounds\n    if (distance < innerRadius || distance > outerRadius + ANTIALIASING_WIDTH) {\n        return 0.0;\n    }\n    \n    var weight: f32 = 0.0;\n    \n    // Inner boundary of ring\n    if (distance < innerRadius + ANTIALIASING_WIDTH) {\n        weight = (distance - innerRadius + ANTIALIASING_WIDTH * 0.5) / ANTIALIASING_WIDTH;\n    }\n    // Outer boundary of ring\n    else if (distance > outerRadius - ANTIALIASING_WIDTH) {\n        weight = (outerRadius + ANTIALIASING_WIDTH * 0.5 - distance) / ANTIALIASING_WIDTH;\n    }\n    else {\n        weight = 1.0;\n    }\n    \n    return clamp(weight, 0.0, 1.0);\n}\n\n// Calculate all three ring fillings in a single pass\nfn calculateAllRings(gid: vec3<u32>) -> vec3<f32> {\n    let x = i32(gid.x);\n    let y = i32(gid.y);\n    let centerX = f32(x);\n    let centerY = f32(y);\n    \n    var sum1: f32 = 0.0;\n    var sum2: f32 = 0.0;\n    var sum3: f32 = 0.0;\n    var totalWeight1: f32 = 0.0;\n    var totalWeight2: f32 = 0.0;\n    var totalWeight3: f32 = 0.0;\n    \n    // Sample in the largest possible radius (ring 3)\n    let sampleRadius = i32(ceil(RING3_OUTER + ANTIALIASING_WIDTH));\n    \n    for (var dy: i32 = -sampleRadius; dy <= sampleRadius; dy++) {\n        for (var dx: i32 = -sampleRadius; dx <= sampleRadius; dx++) {\n            let distance = sqrt(f32(dx * dx + dy * dy));\n            \n            // Calculate weights for all three rings\n            let weight1 = calculateRingWeight(distance, RING1_INNER, RING1_OUTER);\n            let weight2 = calculateRingWeight(distance, RING2_INNER, RING2_OUTER);\n            let weight3 = calculateRingWeight(distance, RING3_INNER, RING3_OUTER);\n            \n            // Only load pixel if at least one ring needs it\n            if (weight1 > 0.0 || weight2 > 0.0 || weight3 > 0.0) {\n                let coord = wrapCoord(x + dx, y + dy);\n                let pixel = textureLoad(src, vec2<u32>(coord), 0);\n                \n                // Accumulate for ring 1 (red channel)\n                if (weight1 > 0.0) {\n                    sum1 += pixel[0] * weight1;\n                    totalWeight1 += weight1;\n                }\n                \n                // Accumulate for ring 2 (green channel)\n                if (weight2 > 0.0) {\n                    sum2 += pixel[1] * weight2;\n                    totalWeight2 += weight2;\n                }\n                \n                // Accumulate for ring 3 (blue channel)\n                if (weight3 > 0.0) {\n                    sum3 += pixel[2] * weight3;\n                    totalWeight3 += weight3;\n                }\n            }\n        }\n    }\n    \n    // Calculate final normalized values\n    let ring1 = select(0.0, sum1 / totalWeight1, totalWeight1 > 0.0);\n    let ring2 = select(0.0, sum2 / totalWeight2, totalWeight2 > 0.0);\n    let ring3 = select(0.0, sum3 / totalWeight3, totalWeight3 > 0.0);\n    \n    return vec3<f32>(ring1, ring2, ring3);\n}\n\nfn activation(x: f32) -> f32 {\n    // x is the convolution result (inner region)\n    // Normalize by kernel area to get the filling ratio\n    let innerFilling = x / f32(KERNEL_AREA);\n    \n    // Calculate all three ring fillings\n    let ringFillings = calculateAllRings(activationContext.gid);\n    \n    // Determine which channel we're processing\n    let currentChannel = activationContext.channel;\n    \n    // Use the appropriate ring filling as the neighborhood\n    var outerFilling: f32;\n    if (currentChannel == 0u) {\n        outerFilling = ringFillings.x; // Red uses ring 1\n    } else if (currentChannel == 1u) {\n        outerFilling = ringFillings.y; // Green uses ring 2\n    } else {\n        outerFilling = ringFillings.z; // Blue uses ring 3\n    }\n    \n    // Apply SmoothLife transition function\n    let n = outerFilling;\n    let m = innerFilling;\n    \n    // Calculate birth and death thresholds based on the current cell state\n    let birthThreshold1 = sigmaMix(BIRTH_1, DEATH_1, m, ALPHA_M);\n    let birthThreshold2 = sigmaMix(BIRTH_2, DEATH_2, m, ALPHA_M);\n    \n    // Apply the transition function\n    let result = sigma2(n, birthThreshold1, birthThreshold2, ALPHA_N);\n\n    // For discrete time stepping, return the result directly\n    // For continuous time stepping, this would be: m + dt * (2*birthSignal - 1)\n    return clamp(m + (0.2 * (2 * result - 1)), 0.0, 1.0);\n}",
  "normalize": false
}